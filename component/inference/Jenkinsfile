pipeline {
    agent any
    options {
        buildDiscarder logRotator(
            daysToKeepStr: '16',
            numToKeepStr: '10'
        )
    }
    stages {
        stage('build') {
            steps {
                echo 'build inference'
            }
        }
        stage("test") {
            steps {
                echo "pipenv run pytest"
            }
        }

        stage('Publish') {
            parallel {
                stage('Check Changes inference') {
                    steps {
                        script {
                            def previousVersion = sh(script: 'git show HEAD~1:component/inference/version.txt', returnStdout: true).trim()
                            echo "Previous version: ${previousVersion}"
                            def currentVersion = sh(script: "cat ${WORKSPACE}/component/inference/version.txt", returnStdout: true).trim()
                            echo "Current version: ${currentVersion}"
                            if (previousVersion != currentVersion) {
                                echo "Version file has changed. Proceeding with image build..."
                                buildInferenceImage()
                            } else {
                                echo "No changes in the version file. Skipping image build."
                            }
                        }
                    }
                }
                stage('Check Changes metrics') {
                    steps {
                        script {
                            def previousVersion = sh(script: 'git show HEAD~1:component/inference/version_metrics.txt', returnStdout: true).trim()
                            echo "Previous version: ${previousVersion}"
                            def currentVersion = sh(script: "cat ${WORKSPACE}/component/inference/version_metrics.txt", returnStdout: true).trim()
                            echo "Current version: ${currentVersion}"
                            if (previousVersion != currentVersion) {
                                echo "Version file has changed. Proceeding with image build..."
                                buildInferenceMetricsImage()
                            } else {
                                echo "No changes in the version file. Skipping image build."
                            }
                        }
                    }
                }
            }
        }
    }
}
def buildInferenceImage() {
    def version = sh(script: 'cat ${WORKSPACE}/component/inference/version.txt', returnStdout: true).trim()
    def dateTime = sh(script: 'date +"%Y%m%d%H%M"', returnStdout: true).trim()
    def imageTag = "${version}-${dateTime}"
    def config = readJSON file: "${WORKSPACE}/component/build.json"
    def inferenceConfig = config.script_paths.inference_image
    def region = inferenceConfig.region
    def project = inferenceConfig.project
    def repository = inferenceConfig.repository
    def imageName = inferenceConfig.imageName
    def pythonVersion = inferenceConfig.pythonVersion

    sh "cp ${WORKSPACE}/component/build.json ${WORKSPACE}/component/inference/"
    dir("${WORKSPACE}/component/inference") {
        sh "gcloud auth configure-docker us-west1-docker.pkg.dev"
        sh "docker build --build-arg=PYTHON_VERSION=${pythonVersion} -t inference -f Dockerfile ."
        sh "docker tag inference ${region}/${project}/${repository}/${imageName}:${imageTag}"
        sh "docker push ${region}/${project}/${repository}/${imageName}:${imageTag}"
    }
}

def buildInferenceMetricsImage() {
    def version = sh(script: 'cat ${WORKSPACE}/component/inference/version.txt', returnStdout: true).trim()
    def dateTime = sh(script: 'date +"%Y%m%d%H%M"', returnStdout: true).trim()
    def imageTag = "${version}-${dateTime}"
    def config = readJSON file: "${WORKSPACE}/component/build.json"
    def metricsConfig = config.script_paths.inference_metric_image
    def region = metricsConfig.region
    def project = metricsConfig.project
    def repository = metricsConfig.repository
    def imageName = metricsConfig.imageName
    def pythonVersion = metricsConfig.pythonVersion

    sh "cp ${WORKSPACE}/component/build.json ${WORKSPACE}/component/inference/"
    dir("${WORKSPACE}/component/inference") {
        sh "gcloud auth configure-docker us-west1-docker.pkg.dev"
        sh "docker build --build-arg=PYTHON_VERSION=${pythonVersion} -t inference-metrics -f Dockerfile_metrics ."
        sh "docker tag inference-metrics ${region}/${project}/${repository}/${imageName}:${imageTag}"
        sh "docker push ${region}/${project}/${repository}/${imageName}:${imageTag}"
    }
}
