pipeline {
    agent any
    options {
        buildDiscarder logRotator(
            daysToKeepStr: '16',
            numToKeepStr: '10'
        )
    }
    stages {
        stage('Check Changes') {
            steps {
                script {
                    sh 'git fetch origin'
                    def hasChangesOutput = sh(script: 'git diff origin/main', returnStdout: true).trim()
                    echo "Git Diff Output: ${hasChangesOutput}"
                }
            }
        }
        stage('Build and Test') {
            when {
                changeset '**/component/test/**'
            }
            steps {
                echo 'Building and testing...'
                // Add your build and test steps here
            }
        }
        stage("Prepare Build") {
            steps {
                sh "cp ${WORKSPACE}/component/build.json ${WORKSPACE}/component/test/"
            }
        }
        stage("Publish") {
            steps {
                script {
                    def hasChanges = sh(script: 'git diff --quiet origin/main', returnStatus: true)
                    if (hasChanges == 1) {
                        echo "Skipping image build since there are no changes."
                    } else {
                        // Your existing script for building and pushing the Docker image
                        def version = sh(script: 'cat ${WORKSPACE}/component/inference/version.txt', returnStdout: true).trim()
                        def dateTime = sh(script: 'date +"%Y%m%d%H%M"', returnStdout: true).trim()
                        def imageTag = "${version}-${dateTime}"
                        def config = readJSON file: "${WORKSPACE}/component/build.json"
                        def inferenceConfig = config.script_paths.inference_image
                        def region = inferenceConfig.region
                        def project = inferenceConfig.project
                        def repository = inferenceConfig.repository
                        def imageName = inferenceConfig.imageName
                        def pythonVersion = inferenceConfig.pythonVersion

                        sh "cp ${WORKSPACE}/component/build.json ${WORKSPACE}/component/inference/"
                        // Changing the working directory to where the Dockerfile is located
                        dir("${WORKSPACE}/component/inference") {
                            sh "gcloud auth configure-docker us-west1-docker.pkg.dev"
                            sh "docker build --build-arg=PYTHON_VERSION=${pythonVersion} -t inference -f Dockerfile ."
                            sh "docker tag inference ${region}/${project}/${repository}/${imageName}:${imageTag}"
                            sh "docker push ${region}/${project}/${repository}/${imageName}:${imageTag}"
                        }
                    }
                }
            }
        }
    }
}
